package edu.ouc.cc150;

import java.util.Arrays;

/**
 * 整数对查找

题目描述

请设计一个高效算法，找出数组中两数之和为指定值的所有整数对。

给定一个int数组A和数组大小n以及需查找的和sum，请返回和为sum的整数对的个数。保证数组大小小于等于3000。
测试样例：

[1,2,3,4,5],5,6

返回：2

 * @author wqx
 *
 */
public class _17_12_FindPair {
	
	/**
	 * 思路：先进行排序，O(n*logn),在从两头相加
	 * 
	 * 需要考虑相等元素的情况：[2,2,2,2],4,4
	 * 结果为：6，排列组合C(2,4)
	 * 
	 * 如果不等,[2,2,4,4,4],5,6
	 * 结果为：6, 2的个数 * 4的个数
	 * 
	 * @param A
	 * @param n
	 * @param sum
	 * @return
	 */
    public int countPairs(int[] A, int n, int sum) {
    	
    	Arrays.sort(A);
    	int count = 0;
    	int i = 0, j = n-1;
    	while(i < j){
    		System.out.println("i:" + i + ",j:" + j);
    		if(A[i] + A[j] == sum){
    			if(A[i] == A[j]){//相等，求排列组合
    				int m = (j-i+1);
    				count += (m*(m-1))/2;
    				break;
    			}
    			//A[i] != A[j],那么A[i]的个数 * A[j]的个数
    			int left = 0;
    			int t = i;
    			while(t < j && A[t] == A[i]){t++;left++;}
    			i = t;
    			t = j;
    			int right = 0;
    			while(t >= i && A[t] == A[j]){t--;right++;}
    			count += (left * right);
    			j = t;
    		}else if(A[i] + A[j] < sum){
    			i++;
    		}else{
    			j--;
    		}
    	}
    	return count;
    }
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int[] A = {11,7,7,6,14,2,14,15,2,1,2,12,13,9,8,15,13,8,10,11,14,10,2,9,4,9,3,7,6,10,15,4,7,6,15,3,9,13,5,2,6,10,10,1,12,4,3,3,8,8,1,4,7,11,13,5,13,15,4,3,1,11,6,11,9,9,11,15,12,10,13,3,11,4,8,9,7,3,13,9,11,3,2,11,10,1,4,2,3,3,14,11,5,10,1,14,8,1,11,3,1,9,14,6,1,7,15,10,14,6,4,12,11};
		int[] A2 = {9,10,8,10,1,5,3,4,4,7,13,11,11,9,10,14,2,2,1,2,4,4,10,8,7,11,4,8,11,14,3,8,7,3,10,12,5,7,7,8,15,13,13,10,11,1,4,9,10,4,9,15,3,8,12,10,3,11,10,1,15,11,8,3,1,15,1,4,5,10,10,8,11,15,6,9,15,7,15,12,8,2,14,3,7,15,4,10,11,10,12,4,15,8,5,10,14,1,14,13,4,7,1,15,5,3,10,1,15,12,12,4,11,2,8,5,8,13,5,3,9,14,14,13,11,10,13,13,2,2,7,12,11,8,10,8,9,12,5,13,1,13,13,15,13,14,15,12,11,3,5,10,1,13,11,1,14,6};
		
		int n = 113, sum = 16;
		int n2 = 158, sum2 = 27;
		Arrays.sort(A);
		System.out.println(Arrays.toString(A));
		System.out.println("res:" + new _17_12_FindPair().countPairs(A2, n2, sum2));
	}

}
